require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AdvertsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Advert. As you add validations to Advert, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {

      "title" => "Test title",
      "description" => "test description",
      "city" => "New York Test",
      "street" => "Testowa",
      "phone" => "123456789",
      "price" => "100",
      "job_type" => "full_time",
      "advert_type" => "job"
    }
  end

  let(:invalid_attributes) do
    {
      "title" => "",
      "description" => ""
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AdvertsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      get :index
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      advert = FactoryGirl.create(:advert)
      get :show, params: { id: advert.to_param }, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      advert = FactoryGirl.build(:advert)
      user = FactoryGirl.create(:user)
      sign_in user
      get :new, params: { id: advert.to_param }, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      user = FactoryGirl.create(:user)
      advert = FactoryGirl.create(:advert, user: user)
      sign_in user
      get :edit, params: { id: advert.id }
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Advert" do
        expect do
          user = FactoryGirl.create(:user)
          sign_in user
          post :create, params: { advert: valid_attributes }, session: valid_session
        end.to change { Advert.count }.by(1)
      end

      it "redirects to the created advert" do
        user = FactoryGirl.create(:user)
        sign_in user
        post :create, params: { advert: valid_attributes }, session: valid_session
        expect(response).to redirect_to(Advert.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        user = FactoryGirl.create(:user)
        sign_in user
        post :create, params: { advert: invalid_attributes }, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      # let(:new_attributes) do
      #   {
      #   "title" => "New Test Title",
      #   "city" => "New Test City"
      #   }
      # end

      it "updates the requested advert" do
        user = FactoryGirl.create(:user)
        sign_in user
        advert = FactoryGirl.create(:advert)
        new_attributes = advert.update_attributes(title: "New Title", city: "New city")
        put :update, params: { id: advert.to_param, advert: new_attributes }, session: valid_session
        advert.reload
        expect(advert.title).to eq "New Title"
        expect(advert.city).to eq "New city"
      end

      it "redirects to the advert" do
        user = FactoryGirl.create(:user)
        sign_in user
        advert = FactoryGirl.create(:advert, user: user)
        put :update, params: { id: advert.to_param, advert: valid_attributes }, session: valid_session
        expect(response).to redirect_to(advert_path(advert))
      end
    end

    context "with invalid params" do
      it "displays the 'edit' template)" do
        user = FactoryGirl.create(:user)
        sign_in user
        advert = FactoryGirl.create(:advert, user: user)

        put :update, params: { id: advert.to_param, advert: invalid_attributes }, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested advert" do
      user = FactoryGirl.create(:user)
      to_delete = FactoryGirl.create(:advert, user: user)
      sign_in user
      expect do
        delete :destroy, params: { id: to_delete.to_param }
      end.to change { Advert.count }.by(-1)
    end

    it "redirects to the adverts list" do
      advert = FactoryGirl.create(:advert)
      user = FactoryGirl.create(:user)
      sign_in user
      delete :destroy, params: { id: advert.to_param }, session: valid_session
      expect(response).to redirect_to(adverts_url)
    end
  end
end
